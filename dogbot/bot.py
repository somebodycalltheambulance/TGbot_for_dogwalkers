# dogbot/bot.py
import logging
import asyncio
import datetime as dt
import re

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from dogbot.settings import settings
from dogbot.keyboards import main_menu
from dogbot.states import OrderStates, WorkStates, ProposalStates
from dogbot import db

logging.basicConfig(level=logging.INFO)

if not settings.BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç. –ó–∞–ø–æ–ª–Ω–∏ .env")

bot = Bot(settings.BOT_TOKEN)
dp = Dispatcher()

# ====================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã / —Ö–µ–ª–ø–µ—Ä—ã UI ======================
def kb_walk_types() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±—ã—á–Ω—ã–π", callback_data="walk:normal")],
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–π", callback_data="walk:active")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back:main")],
    ])

def kb_services() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–≥—É–ª", callback_data="srv:walk")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–¥–µ—Ä–∂–∫–∞", callback_data="srv:boarding")],
        [InlineKeyboardButton(text="–ù—è–Ω—è", callback_data="srv:nanny")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back:main")],
    ])

def kb_order_candidates(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã", callback_data=f"cands:{order_id}")],
    ])

def kb_respond(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úã –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"pr:{order_id}")],
    ])

def order_title(service: str, walk_type: str | None) -> str:
    title = {"walk": "ü¶Æ –í—ã–≥—É–ª", "boarding": "üè° –ü–µ—Ä–µ–¥–µ—Ä–∂–∫–∞", "nanny": "üë©‚Äçüçº –ù—è–Ω—è"}.get(service, "üê∂ –£—Å–ª—É–≥–∞")
    if service == "walk" and walk_type:
        sub = {"normal": "–û–±—ã—á–Ω—ã–π", "active": "–ê–∫—Ç–∏–≤–Ω—ã–π"}.get(walk_type, "")
        if sub:
            title += f" ({sub})"
    return title

def is_admin(user_id: int) -> bool:
    return user_id in settings.ADMIN_IDS

async def require_walker(user_id: int) -> bool:
    role = await db.get_user_role(user_id)
    return role == "walker"

async def send_order_to_walkers(card_text: str, photo_file_id: str | None, order_id: int):
    """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–∞–∑–∞ –≤—Å–µ–º walker'–∞–º –≤ –ª–∏—á–∫—É (–≤–∞—Ä–∏–∞–Ω—Ç B)."""
    walker_ids = await db.list_walkers_ids()
    if not walker_ids:
        return
    batch = 25
    for i in range(0, len(walker_ids), batch):
        chunk = walker_ids[i:i + batch]
        tasks = []
        for wid in chunk:
            if photo_file_id:
                tasks.append(bot.send_photo(wid, photo=photo_file_id, caption=card_text, reply_markup=kb_respond(order_id)))
            else:
                tasks.append(bot.send_message(wid, card_text, reply_markup=kb_respond(order_id)))
        await asyncio.gather(*tasks, return_exceptions=True)
        await asyncio.sleep(1)

async def send_order_to_walkers_by_area(card_text: str, photo_file_id: str | None, order_id: int, area: str):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–º walker'–∞–º, —É –∫–æ–≥–æ —Ä–∞–π–æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–∫–∞–∑–æ–º."""
    ids = await db.list_walkers_by_area(area)
    if not ids:
        # fallback: –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —à–ª—ë–º –≤—Å–µ–º
        return await send_order_to_walkers(card_text, photo_file_id, order_id)

    batch = 25
    for i in range(0, len(ids), batch):
        chunk = ids[i:i + batch]
        tasks = []
        for wid in chunk:
            if photo_file_id:
                tasks.append(bot.send_photo(
                    wid, photo=photo_file_id,
                    caption=card_text,
                    reply_markup=kb_respond(order_id)
                ))
            else:
                tasks.append(bot.send_message(
                    wid, card_text,
                    reply_markup=kb_respond(order_id)
                ))
        await asyncio.gather(*tasks, return_exceptions=True)
        await asyncio.sleep(1)

@dp.message(Command("whoami"))
async def whoami_cmd(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: {m.from_user.id}")

# –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥—É–±–ª—å –ø–æ —Ç–µ–∫—Å—Ç—É, –µ—Å–ª–∏ Command –≥–¥–µ-—Ç–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç
@dp.message(F.text.startswith("/whoami"))
async def whoami_text(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: {m.from_user.id}")


@dp.message(F.text == "üë§ –†–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å")
async def on_work(m: Message, state: FSMContext):
    await state.set_state(WorkStates.collecting_name)
    await m.answer("–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–ò–º—è –∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ)")

@dp.message(WorkStates.collecting_name, F.text)
async def work_name(m: Message, state: FSMContext):
    name = m.text.strip()[:64]
    await state.update_data(name=name)
    await state.set_state(WorkStates.collecting_phone)
    await m.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–ø—Ä–∏–º–µ—Ä: +79990000000).")

@dp.message(WorkStates.collecting_phone, F.text)
async def work_phone(m: Message, state: FSMContext):
    phone = m.text.strip().replace(" ", "")
    if not phone.startswith("+") or len(phone) < 10:
        return await m.reply("–î–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Å +, –æ–∫? –ù–∞–ø—Ä–∏–º–µ—Ä +79990000000")
    await state.update_data(phone=phone)
    await state.set_state(WorkStates.collecting_exp)
    await m.answer("–ö–æ—Ä–æ—Ç–∫–æ –æ–± –æ–ø—ã—Ç–µ: –ø–æ—Ä–æ–¥—ã, —Å–∫–æ–ª—å–∫–æ –≤–æ–¥–∏—à—å, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞–≤–∫—É —á–∏—Å–ª–æ–º (—Ä—É–±/—á).")

@dp.message(WorkStates.collecting_exp, F.text)
async def work_exp(m: Message, state: FSMContext):
    bio = m.text.strip()[:500]
    # –≤—ã—Ç–∞—â–∏–º —Å—Ç–∞–≤–∫—É (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ 3-5 —Ü–∏—Ñ—Ä)
    rate = None
    m_rate = re.search(r"\b(\d{3,5})\b", bio)
    if m_rate:
        try:
            rate = int(m_rate.group(1))
        except ValueError:
            rate = None
    await state.update_data(bio=bio, rate=rate)
    await state.set_state(WorkStates.collecting_areas)
    await m.answer("–í –∫–∞–∫–∏—Ö —Ä–∞–π–æ–Ω–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—à—å? –£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¶–µ–Ω—Ç—Ä, –°–∞–≤—ë–ª–æ–≤—Å–∫–∏–π, –ö—É–ø—á–∏–Ω–æ).")

@dp.message(WorkStates.collecting_areas, F.text)
async def work_areas(m: Message, state: FSMContext):
    areas = m.text.strip()[:200]
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—å
    await db.upsert_user(
        tg_id=m.from_user.id,
        username=m.from_user.username,
        full_name=data["name"],
        role="walker",
    )
    await db.upsert_walker_profile(
        walker_id=m.from_user.id,
        phone=data.get("phone"),
        bio=data.get("bio"),
        rate=data.get("rate"),
        areas=areas,
    )

    await state.clear()
    msg = "–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω –∏ —Ä–æ–ª—å –≤—ã–¥–∞–Ω–∞ (walker).\n"
    if data.get("rate"):
        msg += f"–°—Ç–∞–≤–∫–∞: {data['rate']}‚ÇΩ/—á–∞—Å.\n"
    msg += f"–†–∞–π–æ–Ω—ã: {areas or '‚Äî'}\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –∑–∞—è–≤–∫–∏."
    await m.answer(msg)


# ====================== –£—Ç–∏–ª–∏—Ç—ã ======================
def _clean_int(s: str) -> int | None:
    s = (s or "").strip().replace(" ", "")
    return int(s) if s.isdigit() else None

def _parse_when(txt: str) -> dt.datetime | None:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º:
    - 'YYYY-MM-DD HH:MM'
    - 'YYYY-MM-DD HH.MM'
    - '—Å–µ–≥–æ–¥–Ω—è 19:00' / '–∑–∞–≤—Ç—Ä–∞ 10:30'
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º aware datetime –≤ UTC. (MVP –±–µ–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ TZ —é–∑–µ—Ä–∞)
    """
    if not txt:
        return None
    t = txt.strip().lower()

    for fmt in ("%Y-%m-%d %H:%M", "%Y-%m-%d %H.%M"):
        try:
            naive = dt.datetime.strptime(t, fmt)
            return naive.replace(tzinfo=dt.timezone.utc)
        except ValueError:
            pass

    def _hhmm_to_utc(day_offset: int) -> dt.datetime | None:
        try:
            parts = t.split(maxsplit=1)
            if len(parts) < 2:
                return None
            hhmm = parts[1].replace(".", ":")
            hh, mm = [int(x) for x in hhmm.split(":")]
            local = dt.datetime.now().replace(hour=hh, minute=mm, second=0, microsecond=0)
            local = local + dt.timedelta(days=day_offset)
            return local.astimezone(dt.timezone.utc)
        except Exception:
            return None

    if t.startswith("—Å–µ–≥–æ–¥–Ω—è"):
        return _hhmm_to_utc(0)
    if t.startswith("–∑–∞–≤—Ç—Ä–∞"):
        return _hhmm_to_utc(1)
    return None

# ====================== –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ======================
@dp.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    await db.upsert_user(
        tg_id=m.from_user.id,
        username=m.from_user.username,
        full_name=m.from_user.full_name,
        phone=None,
        role="client",
    )
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ DogBot: –≤—ã–≥—É–ª/–ø–µ—Ä–µ–¥–µ—Ä–∂–∫–∞/–Ω—è–Ω—è. –í—ã–±–∏—Ä–∞–π –Ω–∏–∂–µ üëá", reply_markup=main_menu())

@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer("–ö–æ–º–∞–Ω–¥—ã: /start, /help, /my_orders, /cancel, /role")

@dp.message(Command("state"))
async def check_state(m: Message, state: FSMContext):
    await m.answer(f"state: {await state.get_state()}")

@dp.message(Command("cancel"))
async def cmd_cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_menu())

# ====================== –†–æ–ª–∏ / –∞–¥–º–∏–Ω–∫–∞ ======================
@dp.message(Command("role"))
async def cmd_role(m: Message):
    role = await db.get_user_role(m.from_user.id)
    await m.answer(f"–¢–≤–æ—è —Ä–æ–ª—å: {role or '–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'}")

@dp.message(Command("set_role"))
async def cmd_set_role(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ –∞–¥–º–∏–Ω. –ò –Ω–µ –ø—ã—Ç–∞–π—Å—è üòâ")
    parts = (m.text or "").split()
    if len(parts) != 3:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_role <tg_id> <client|walker|admin>")
    try:
        uid = int(parts[1]); role = parts[2].strip()
        await db.set_user_role(uid, role)
        await m.answer(f"OK: {uid} ‚Üí {role}")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("candidates"))
async def cmd_candidates(m: Message):
    parts = (m.text or "").split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /candidates <order_id>")
    oid = int(parts[1])
    order = await db.get_order(oid)
    if not order or order["client_id"] != m.from_user.id:
        return await m.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à.")
    text, kb = await _render_candidates(oid)
    await m.answer(text, reply_markup=kb)

@dp.message(Command("cancel_order"))
async def cmd_cancel_order(m: Message):
    parts = (m.text or "").split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel_order <order_id>")
    oid = int(parts[1])
    order = await db.get_order(oid)
    if not order or order["client_id"] != m.from_user.id:
        return await m.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à.")
    if order["status"] in ("done", "cancelled"):
        return await m.answer(f"–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å: —Å—Ç–∞—Ç—É—Å {order['status']}.")
    # —É–≤–µ–¥–æ–º–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    asg = await db.get_assignment(oid)
    await db.cancel_order(oid)
    await m.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    if asg:
        try:
            await bot.send_message(asg["walker_id"], f"‚ùóÔ∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{oid}.")
        except Exception:
            pass

@dp.message(Command("reschedule"))
async def cmd_reschedule(m: Message):
    # /reschedule <order_id> <YYYY-MM-DD> <HH:MM> <duration_min>
    parts = (m.text or "").split()
    if len(parts) != 5 or not parts[1].isdigit() or not parts[4].isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reschedule <order_id> 2025-09-01 19:00 60")
    oid = int(parts[1]); duration = int(parts[4])
    order = await db.get_order(oid)
    if not order or order["client_id"] != m.from_user.id:
        return await m.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à.")
    if order["status"] in ("done", "cancelled"):
        return await m.answer(f"–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å: —Å—Ç–∞—Ç—É—Å {order['status']}.")
    try:
        when_at = dt.datetime.fromisoformat(parts[2] + " " + parts[3])
        if when_at.tzinfo is None:
            when_at = when_at.replace(tzinfo=dt.timezone.utc)  # –∏–ª–∏ —Ç–≤–æ—è TZ
    except Exception:
        return await m.answer("–î–∞—Ç–∞/–≤—Ä–µ–º—è –∫—Ä–∏–≤—ã–µ. –ü—Ä–∏–º–µ—Ä: 2025-09-01 19:00")
    await db.update_order_time(oid, when_at, duration)
    await m.answer(f"–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {when_at} ({duration} –º–∏–Ω).")

@dp.message(Command("set_address"))
async def cmd_set_address(m: Message):
    # /set_address <order_id> <–∞–¥—Ä–µ—Å —Ü–µ–ª–∏–∫–æ–º>
    parts = (m.text or "").split(maxsplit=2)
    if len(parts) < 3 or not parts[1].isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_address <order_id> –£–ª. –ü—Ä–∏–º–µ—Ä, 1")
    oid = int(parts[1]); addr = parts[2][:200]
    order = await db.get_order(oid)
    if not order or order["client_id"] != m.from_user.id:
        return await m.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à.")
    if order["status"] in ("done", "cancelled"):
        return await m.answer(f"–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å: —Å—Ç–∞—Ç—É—Å {order['status']}.")
    await db.update_order_address(oid, addr)
    await m.answer(f"–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {addr}")

@dp.message(Command("my_orders"))
async def cmd_my_orders(m: Message):
    orders = await db.list_orders_by_client(m.from_user.id)
    if not orders:
        return await m.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    
    lines = []
    for o in orders:
        lines.append(f"#{o['id']} ‚Äî {o['service']} {o['pet_name']} ({o['status']})")
    await m.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(lines))


@dp.message(F.text == "üë§ –†–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å")
async def on_work(m, state):
    await state.set_state(WorkStates.collecting_name)
    await m.answer("–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

@dp.message(WorkStates.collecting_name, F.text)
async def work_name(m, state):
    await state.update_data(name=m.text.strip()[:64])
    await state.set_state(WorkStates.collecting_phone)
    await m.answer("–¢–µ–ª–µ—Ñ–æ–Ω —Å +, –Ω–∞–ø—Ä. +79990000000")

@dp.message(WorkStates.collecting_phone, F.text)
async def w_phone(m: Message, state: FSMContext):
    await state.update_data(phone=m.text.strip()[:32])
    await state.set_state(WorkStates.city)
    await m.answer("–ì–æ—Ä–æ–¥:")

@dp.message(WorkStates.collecting_exp, F.text)
async def work_exp(m, state):
    import re
    bio = m.text.strip()[:500]
    m_rate = re.search(r"\b(\d{3,5})\b", bio)
    rate = int(m_rate.group(1)) if m_rate else None
    await state.update_data(bio=bio, rate=rate)
    await state.set_state(WorkStates.collecting_areas)
    await m.answer("–†–∞–π–æ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¶–µ–Ω—Ç—Ä, –°–∞–≤—ë–ª–æ–≤—Å–∫–∏–π).")

@dp.message(WorkStates.collecting_phone, F.text)
async def work_phone(m, state):
    phone = m.text.strip().replace(" ", "")
    if not phone.startswith("+") or len(phone) < 10:
        return await m.reply("–î–∞–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ñ–æ—Ä–º–∞—Ç–∞ +7...")
    await state.update_data(phone=phone)
    await state.set_state(WorkStates.collecting_exp)
    await m.answer("–ö–æ—Ä–æ—Ç–∫–æ –æ–± –æ–ø—ã—Ç–µ. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞–≤–∫—É (—á–∏—Å–ª–æ–º).")

@dp.message(WorkStates.collecting_exp, F.text)
async def w_experience(m: Message, state: FSMContext):
    await state.update_data(experience=m.text.strip()[:300])
    await state.set_state(WorkStates.price_from)
    await m.answer("–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Ä—É–±, —á–∏—Å–ª–æ):")
    
@dp.message(WorkStates.collecting_areas, F.text)
async def work_areas(m, state):
    areas = m.text.strip()[:200]
    data = await state.get_data()
    await db.upsert_user(m.from_user.id, m.from_user.username, data["name"], role="walker")
    await db.upsert_walker_profile(m.from_user.id, phone=data.get("phone"), bio=data.get("bio"),
            price_from=data.get("rate"), areas=areas)
    await state.clear()
    await m.answer(
    "üéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω. "
    "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–∫–∞–∑—ã –ø–æ —Ç–≤–æ–∏–º —Ä–∞–π–æ–Ω–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –õ–°.\n"
    f"–†–∞–π–æ–Ω—ã: {areas or '‚Äî'}\n\n"
    "–ö–æ–º–∞–Ω–¥—ã: /profile, /set_areas, /set_rate."
)


# ====================== –ì–ª–∞–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∑–∞–∫–∞–∑–∞ ======================
@dp.message(F.text == "üê∂ –£—Å–ª—É–≥–∏ –¥–ª—è —Å–æ–±–∞–∫")
async def on_services(m: Message, state: FSMContext):
    await state.set_state(OrderStates.choosing_service)
    await m.answer("–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±–∏—Ä–∞–µ–º?", reply_markup=kb_services())

@dp.callback_query(F.data == "back:main")
async def cb_back_main(cq: CallbackQuery, state: FSMContext):
    await state.clear()
    await cq.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await cq.answer()

@dp.callback_query(OrderStates.choosing_service, F.data.startswith("srv:"))
async def cb_choose_service(cq: CallbackQuery, state: FSMContext):
    service = cq.data.split(":", 1)[1]
    await state.update_data(service=service, walk_type=None)
    if service == "walk":
        await state.set_state(OrderStates.choosing_walk_type)
        await cq.message.edit_text("–í—ã–≥—É–ª ‚Äî –∫–∞–∫–æ–π –Ω—É–∂–µ–Ω?", reply_markup=kb_walk_types())
    else:
        await state.set_state(OrderStates.pet_name)
        await cq.message.edit_text("–ö–∞–∫ –∑–æ–≤—É—Ç —Å–æ–±–∞–∫—É?")
    await cq.answer()

@dp.callback_query(OrderStates.choosing_walk_type, F.data.startswith("walk:"))
async def cb_choose_walk_type(cq: CallbackQuery, state: FSMContext):
    await state.update_data(walk_type=cq.data.split(":", 1)[1])
    await state.set_state(OrderStates.pet_name)
    await cq.message.edit_text("–ö–∞–∫ –∑–æ–≤—É—Ç —Å–æ–±–∞–∫—É?")
    await cq.answer()

@dp.message(OrderStates.pet_name, F.text)
async def step_pet_name(m: Message, state: FSMContext):
    await state.update_data(pet_name=m.text.strip()[:64])
    await state.set_state(OrderStates.pet_size)
    await m.answer("–†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏? (small/medium/large)")

@dp.message(OrderStates.pet_size, F.text)
async def step_pet_size(m: Message, state: FSMContext):
    size = m.text.strip().lower()
    if size not in {"small", "medium", "large"}:
        return await m.reply("–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: small / medium / large")
    await state.update_data(pet_size=size)
    await state.set_state(OrderStates.area)
    await m.answer("–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –Ω—É–∂–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¶–µ–Ω—Ç—Ä, –°–∞–≤—ë–ª–æ–≤—Å–∫–∏–π, –ö—É–ø—á–∏–Ω–æ)")

@dp.message(OrderStates.area, F.text)
async def step_area(m: Message, state: FSMContext):
    area = m.text.strip()[:64]
    if len(area) < 2:
        return await m.reply("–î–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ø–æ–∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ.")
    await state.update_data(area=area)
    await state.set_state(OrderStates.when_at)
    await m.answer("–ö–æ–≥–¥–∞? –§–æ—Ä–º–∞—Ç: 2025-08-23 19:00 –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è 19:00¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ 10:30¬ª. /cancel ‚Äî –æ—Ç–º–µ–Ω–∞.")

@dp.message(OrderStates.when_at, F.text)
async def step_when(m: Message, state: FSMContext):
    ts = _parse_when(m.text)
    if not ts or ts <= dt.datetime.now(dt.timezone.utc):
        return await m.reply("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–ª–∏ —ç—Ç–æ —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 2025-08-23 19:00")
    await state.update_data(when_at=ts)
    await state.set_state(OrderStates.duration_min)
    await m.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö? (–Ω–∞–ø—Ä–∏–º–µ—Ä 60)")

@dp.message(OrderStates.duration_min, F.text)
async def step_duration(m: Message, state: FSMContext):
    val = _clean_int(m.text)
    if not val or val <= 0 or val > 12 * 60:
        return await m.reply("–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º > 0 –∏ <= 720.")
    await state.update_data(duration_min=val)
    await state.set_state(OrderStates.address)
    await m.answer("–ê–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥).")

@dp.message(OrderStates.address, F.text)
async def step_address(m: Message, state: FSMContext):
    addr = m.text.strip()
    if len(addr) < 5:
        return await m.reply("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å, –¥–∞–≤–∞–π —Ç–æ—á–Ω–µ–µ.")
    await state.update_data(address=addr)
    await state.set_state(OrderStates.budget)
    await m.answer("–ë—é–¥–∂–µ—Ç (—Ä—É–±), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å 0 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /skip.")

@dp.message(Command("skip"))
async def skip_any(m: Message, state: FSMContext):
    st = await state.get_state()
    if st == OrderStates.budget.state:
        await state.update_data(budget=None)
        await state.set_state(OrderStates.comment)
        return await m.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). /skip –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å.")
    if st == OrderStates.comment.state:
        await state.update_data(comment=None)
        data = await state.get_data()
        return await _confirm_order(m, state, data)
    await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –Ω–µ –∫ –º–µ—Å—Ç—É :)")

# === –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—à–µ step_comment) ===
async def _confirm_order(m: Message, state: FSMContext, data: dict):
    title = order_title(data["service"], data.get("walk_type"))
    when_local = data["when_at"].astimezone(dt.timezone.utc).strftime("%Y-%m-%d %H:%M UTC")
    text = (
        f"{title}\n"
        f"–ò–º—è: {data['pet_name']} | –†–∞–∑–º–µ—Ä: {data['pet_size']}\n"
        f"–†–∞–π–æ–Ω: {data['area']}\n"
        f"–ö–æ–≥–¥–∞: {when_local} ‚Ä¢ {data['duration_min']} –º–∏–Ω\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget') if data.get('budget') is not None else '‚Äî'}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment') or '‚Äî'}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º?"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="ord:confirm"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="ord:cancel"),
        ]
    ])
    await state.set_state(OrderStates.confirming)
    await m.answer(text, reply_markup=kb)

@dp.callback_query(OrderStates.confirming, F.data.in_({"ord:confirm", "ord:cancel"}))
async def cb_confirm(cq: CallbackQuery, state: FSMContext):
    if cq.data == "ord:cancel":
        await state.clear()
        await cq.message.edit_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª. –í–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")
        return await cq.answer()

    data = await state.get_data()
    order_id = await db.add_order(
    client_id=cq.from_user.id,
    service=data["service"],
    pet_name=data["pet_name"],
    pet_size=data["pet_size"],
    when_at=data["when_at"],
    duration_min=data["duration_min"],
    address=data["address"],
    budget=data.get("budget"),
    comment=data.get("comment"),
    walk_type=data.get("walk_type"),
    )
    await db.publish_order(order_id)

    title = order_title(data["service"], data.get("walk_type"))
    card = (
        f"{title}\n"
        f"–ó–∞–∫–∞–∑ #{order_id}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {cq.from_user.full_name} @{cq.from_user.username}\n"
        f"{data['pet_name']} ‚Ä¢ {data['pet_size']} ‚Ä¢ {data['duration_min']} –º–∏–Ω\n"
        f"–†–∞–π–æ–Ω: {data['area']}\n"
        f"–ö–æ–≥–¥–∞: {data['when_at'].astimezone(dt.timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget') if data.get('budget') is not None else '‚Äî'}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment') or '‚Äî'}\n"
    )

    await send_order_to_walkers_by_area(card, None, order_id, data["area"])

    await cq.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{order_id} —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ –Ø —Ä–∞–∑–æ—Å–ª–∞–ª –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.")
    await state.clear()
    await cq.answer()

# === –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –º–∞—Å—Ç–µ—Ä–∞: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===

@dp.message(OrderStates.budget, F.text)
async def step_budget(m: Message, state: FSMContext):
    val = _clean_int(m.text)
    if val is None or val < 0 or val > 1_000_000:
        return await m.reply("–ë—é–¥–∂–µ—Ç ‚Äî –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ò–ª–∏ –Ω–∞–±–µ—Ä–∏ /skip, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ.")
    await state.update_data(budget=val)
    await state.set_state(OrderStates.comment)
    await m.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). /skip –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å.")


@dp.message(OrderStates.comment, F.text)
async def step_comment(m: Message, state: FSMContext):
    await state.update_data(comment=m.text.strip()[:500])
    data = await state.get_data()
    await _confirm_order(m, state, data)

# ====================== –û—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ======================
@dp.callback_query(F.data.startswith("pr:"))
async def cb_proposal_start(cq: CallbackQuery, state: FSMContext):
    order_id = int(cq.data.split(":", 1)[1])
    if not await require_walker(cq.from_user.id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", callback_data="become:walker")]
        ])
        await cq.message.reply("–û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (walker).", reply_markup=kb)
        return await cq.answer()

    await state.set_state(ProposalStates.waiting_price)
    await state.update_data(order_id=order_id)
    await cq.message.reply(f"–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}. –í–∞—à–∞ —Ü–µ–Ω–∞ (—á–∏—Å–ª–æ–º)?")
    await cq.answer()

@dp.callback_query(F.data == "become:walker")
async def cb_become_walker(cq: CallbackQuery):
    await db.set_user_role(cq.from_user.id, "walker")
    await cq.message.reply("–ì–æ—Ç–æ–≤–æ. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è —Ä–æ–ª—å walker. –ú–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è.")
    await cq.answer()

async def _render_candidates(order_id: int) -> tuple[str, InlineKeyboardMarkup]:
    props = await db.list_proposals(order_id)
    if not props:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤.", InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"cands:{order_id}")]
        ])

    lines, rows = [], []
    for p in props:
        name = p.get("full_name") or f"id {p['walker_id']}"
        username = f"@{p['username']}" if p.get("username") else ""
        rate = f", —Å—Ç–∞–≤–∫–∞ {p['rate']}‚ÇΩ/—á" if p.get("rate") else ""
        phone = f", {p['phone']}" if p.get("phone") else ""
        note = p.get("note") or "‚Äî"
        lines.append(f"‚Ä¢ {name} {username}{rate}{phone} ‚Äî {p['price']}‚ÇΩ ‚Äî {note}")
        rows.append([
            InlineKeyboardButton(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {name}", callback_data=f"choose:{order_id}:{p['walker_id']}"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"prof:{order_id}:{p['walker_id']}")
        ])
    text = "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:\n" + "\n".join(lines)
    kb = InlineKeyboardMarkup(inline_keyboard=rows + [
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"order:{order_id}")]
    ])
    return text, kb

@dp.message(ProposalStates.waiting_price, F.text)
async def proposal_price(m: Message, state: FSMContext):
    txt = (m.text or "").strip().replace(" ", "")
    if not txt.isdigit():
        return await m.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –ï—â—ë —Ä–∞–∑:")
    await state.update_data(price=int(txt))
    await state.set_state(ProposalStates.waiting_note)
    await m.reply("–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).")

@dp.message(ProposalStates.waiting_note, F.text)
async def proposal_note(m: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    price = data["price"]
    note = m.text.strip() or None

    prop_id = await db.add_proposal(order_id, m.from_user.id, price, note)

    order = await db.get_order(order_id)
    client_id = order["client_id"]
    walker_tag = f"{m.from_user.full_name} @{m.from_user.username}" if m.from_user.username else f"{m.from_user.full_name}"
    msg = (
        f"üìù –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {walker_tag}\n"
        f"–¶–µ–Ω–∞: {price}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {note or '‚Äî'}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"choose:{order_id}:{m.from_user.id}")],
        [InlineKeyboardButton(text="üëÄ –í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã", callback_data=f"cands:{order_id}")],
    ])
    try:
        await bot.send_message(chat_id=client_id, text=msg, reply_markup=kb)
    except Exception as e:
        logging.warning("notify client failed: %s", e)

    await m.reply(f"–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (#{prop_id}). –ñ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.")
    await state.clear()

# ====================== –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ======================
@dp.message(Command("my_orders"))
async def my_orders(m: Message):
    orders = await db.list_orders_by_client(m.from_user.id)
    if not orders:
        return await m.answer("–ü–æ–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´–£—Å–ª—É–≥–∏ –¥–ª—è —Å–æ–±–∞–∫¬ª.")
    for o in orders[:10]:
        title = order_title(o["service"], o.get("walk_type"))
        text = (
            f"{title}\n"
            f"#{o['id']} ‚Ä¢ —Å—Ç–∞—Ç—É—Å: {o['status']}\n"
            f"{o.get('comment') or ''}".strip()
        )
        kb = kb_order_candidates(o["id"])
        await m.answer(text, reply_markup=kb)

@dp.callback_query(F.data.startswith("cands:"))
async def cb_candidates(cq: CallbackQuery):
    order_id = int(cq.data.split(":", 1)[1])
    props = await db.list_proposals(order_id)
    if not props:
        await cq.message.reply(f"–ù–∞ –∑–∞–∫–∞–∑ #{order_id} –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤.")
        return await cq.answer()
    lines = []
    rows = []
    for p in props[:20]:
        rate = f", —Å—Ç–∞–≤–∫–∞ {p['rate']}‚ÇΩ/—á" if p.get("rate") else ""
        phone = f", {p['phone']}" if p.get("phone") else ""
        note = p.get("note") or '‚Äî'
        name = p.get("full_name") or f"id {p['walker_id']}"
        username = f"@{p['username']}" if p.get("username") else ""

        lines.append(f"‚Ä¢ {name} {username}{rate}{phone} ‚Äî {p['price']}‚ÇΩ ‚Äî {note}")

        rows.append([
    InlineKeyboardButton(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {name}", callback_data=f"choose:{order_id}:{p['walker_id']}"),
    InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"prof:{order_id}:{p['walker_id']}"),
])
    await cq.message.reply(f"–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ #{order_id}:\n" + "\n".join(lines),
                           reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
    await cq.answer()

@dp.callback_query(F.data.startswith("choose:"))
async def cb_choose(cq: CallbackQuery):
    _, oid, wid = cq.data.split(":")
    order_id = int(oid); walker_id = int(wid)
    ok = await db.assign_walker(order_id, walker_id)
    if not ok:
        await cq.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å: –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ open/published.")
        return await cq.answer()
    order = await db.get_order(order_id)
    client_id = order["client_id"]
    await cq.message.reply(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}.")
    try:
        await bot.send_message(client_id, f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω (id {walker_id}). –°–≤—è–∂–∏—Ç–µ—Å—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º.")
        await bot.send_message(walker_id, f"‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}. –ö–ª–∏–µ–Ω—Ç: id {client_id}.")
    except Exception as e:
        logging.warning("notify parties failed: %s", e)
    await cq.answer()

@dp.callback_query(F.data.startswith("prof:"))
async def cb_profile(cq: CallbackQuery):
    try:
        _, oid, wid = cq.data.split(":")
        order_id = int(oid); walker_id = int(wid)
    except Exception:
        await cq.answer("—á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏", show_alert=True)
        return

    u = await db.get_user(walker_id) or {}
    p = await db.get_walker_profile(walker_id) or {}

    name = u.get("full_name") or f"id {walker_id}"
    username = f"@{u.get('username')}" if u.get("username") else ""
    phone = p.get("phone") or "‚Äî"
    rate = f"{p.get('rate')}‚ÇΩ/—á" if p.get("rate") else "‚Äî"
    areas = p.get("areas") or "‚Äî"
    bio = p.get("bio") or "‚Äî"

    text = (
        f"‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        f"{name} {username}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–°—Ç–∞–≤–∫–∞: {rate}\n"
        f"–†–∞–π–æ–Ω—ã: {areas}\n"
        f"–û —Å–µ–±–µ: {bio}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {name}", callback_data=f"choose:{order_id}:{walker_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º", callback_data=f"cands:{order_id}")],
    ])

    await cq.message.reply(text, reply_markup=kb)
    await cq.answer()


# ====================== –ü—Ä–æ—á–µ–µ –º–µ–Ω—é ======================
@dp.message(F.text == "üìû –ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
async def on_call_manager(m: Message):
    if not settings.DISPATCHER_CHAT_ID:
        return await m.answer("–ß–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å DISPATCHER_CHAT_ID –≤ .env")
    await bot.send_message(settings.DISPATCHER_CHAT_ID,
                           f"üìû –ó–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {m.from_user.full_name} @{m.from_user.username} (id {m.from_user.id})")
    await m.answer("–ó–æ–≤—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –ª—Å.")

@dp.message(F.text == "‚ùì –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
async def on_faq(m: Message):
    await m.answer("FAQ –ø—Ä–∏–∫—Ä—É—Ç–∏–º –ø–æ–∑–∂–µ. –°–µ–π—á–∞—Å –≥–ª–∞–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî –∑–∞—è–≤–∫–∏/–æ—Ç–∫–ª–∏–∫–∏/–≤—ã–±–æ—Ä.")


@dp.message(Command("profile"))
async def cmd_profile(m: Message):
    p = await db.get_walker_profile(m.from_user.id)
    if not p:
        return await m.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ ¬´üë§ –†–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É.")
    rate = f"{p.get('rate')}‚ÇΩ/—á" if p.get('rate') else "‚Äî"
    areas = p.get('areas') or "‚Äî"
    phone = p.get('phone') or "‚Äî"
    await m.answer(
        f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–°—Ç–∞–≤–∫–∞: {rate}\n"
        f"–†–∞–π–æ–Ω—ã: {areas}"
    )

@dp.message(Command("set_areas"))
async def cmd_set_areas(m: Message, state: FSMContext):
    txt = (m.text or "")
    parts = txt.split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_areas –¶–µ–Ω—Ç—Ä, –ö—É–ø—á–∏–Ω–æ")
    areas = parts[1][:200]
    # –ø–æ–¥—Ç—è–Ω–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–µ—Ä–µ—Ç—å –¥—Ä—É–≥–æ–µ)
    p = await db.get_walker_profile(m.from_user.id) or {}
    await db.upsert_walker_profile(
        walker_id=m.from_user.id,
        phone=p.get("phone"),
        bio=p.get("bio"),
        price_from=p.get("rate"),
        areas=areas,
    )
    await m.answer(f"–†–∞–π–æ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {areas}")

@dp.message(Command("set_rate"))
async def cmd_set_rate(m: Message):
    txt = (m.text or "").replace(" ", "")
    parts = txt.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_rate 600")
    rate = int(parts[1])
    p = await db.get_walker_profile(m.from_user.id) or {}
    await db.upsert_walker_profile(
        walker_id=m.from_user.id,
        phone=p.get("phone"),
        bio=p.get("bio"),
        price_from=rate,
        areas=p.get("areas"),
    )
    await m.answer(f"–°—Ç–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {rate}‚ÇΩ/—á")

def _is_admin(uid: int) -> bool:
    return uid in settings.ADMIN_IDS

@dp.message(Command("pending"))
async def cmd_pending(m: Message):
    if not _is_admin(m.from_user.id):
        return
    rows = await db.list_pending_walkers()
    if not rows:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è.")
    out = []
    for r in rows[:20]:
        name = r.get("full_name") or f"id {r['tg_id']}"
        user = f"@{r['username']}" if r.get("username") else ""
        rate = f"{r.get('rate')}‚ÇΩ/—á" if r.get("rate") else "‚Äî"
        areas = r.get("areas") or "‚Äî"
        out.append(f"‚Ä¢ {name} {user} id={r['tg_id']} | —Å—Ç–∞–≤–∫–∞: {rate} | —Ä–∞–π–æ–Ω—ã: {areas}")
    await m.answer("–û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è:\n" + "\n".join(out))

@dp.message(Command("approve"))
async def cmd_approve(m: Message):
    if not _is_admin(m.from_user.id):
        return
    parts = (m.text or "").split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <tg_id>")
    wid = int(parts[1])
    await db.set_walker_approval(wid, True)
    await m.answer(f"‚úÖ –û–¥–æ–±—Ä–∏–ª walker {wid}")
    try:
        await bot.send_message(wid, "‚úÖ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∑–∞–∫–∞–∑—ã –ø–æ —Å–≤–æ–∏–º —Ä–∞–π–æ–Ω–∞–º.")
    except Exception:
        pass

@dp.message(Command("reject"))
async def cmd_reject(m: Message):
    if not _is_admin(m.from_user.id):
        return
    parts = (m.text or "").split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <tg_id>")
    wid = int(parts[1])
    await db.set_walker_approval(wid, False)
    await m.answer(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏–ª walker {wid}")
    try:
        await bot.send_message(wid, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã –∏ —Å–≤—è–∂–∏—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
    except Exception:
        pass


@dp.message()
async def fallback(m: Message):
    await m.answer("–¢–∫–Ω–∏ –≤ –º–µ–Ω—é –Ω–∏–∂–µ, –Ω–µ –∑–∞–±–∏–≤–∞–π –≥–æ–ª–æ–≤—É üôÇ", reply_markup=main_menu())


# ====================== main ======================
async def main():
    await db.init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ü–æ–∫–∞!")


